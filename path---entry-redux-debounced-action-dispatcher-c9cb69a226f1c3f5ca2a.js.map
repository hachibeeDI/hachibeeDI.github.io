{"version":3,"sources":["webpack:///path---entry-redux-debounced-action-dispatcher-c9cb69a226f1c3f5ca2a.js","webpack:///./.cache/json/entry-redux-debounced-action-dispatcher.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/entry-redux-debounced-action-dispatcher.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","path","date","category","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,iGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,kBAAAC,OAAA,gBAAkDC,gBAAmBC,GAAA,qKAAAC,KAAA,oxIAAqwHC,aAA+xBC,KAAA,qCAAAN,MAAA,gFAAAO,KAAA,mBAAAC,SAAA,WAAAC,MAAA,iCAA4NC,aAAgBJ,KAAA","file":"path---entry-redux-debounced-action-dispatcher-c9cb69a226f1c3f5ca2a.js","sourcesContent":["webpackJsonp([82941879582923],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/entry-redux-debounced-action-dispatcher.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Hatch tech blog\",\"author\":\"Ogura Daiki\"}},\"markdownRemark\":{\"id\":\"/Users/hachibee/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2017-10-31-redux-debounced-action-dispatcher/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>アイデアです。<br>\\nちなみにredux-observableやredux-sagaを導入している場合はそちらで解決したほうが良いんじゃないかとおもいます。</p>\\n<h2>MVXアプリケーションのバリデーションとパフォーマンス問題</h2>\\n<p>Reduxを使っていなかったとしても、Reactを使って素朴にアプリケーションを開発しているとある程度以上の規模になって発生するのがバリデーションのパフォーマンスではなかろうか。</p>\\n<p>最初は一つのinputに対応するプロパティの正当性を素朴に判断するだけだったのが、ある程度の規模になった時点で同一モデルの他のプロパティも一緒に合わせてみなければいけなくなったり、あるいは他のモデルの面倒もみないといけなくなったり。\\nそのうちに、あちこちに散らばっていたバリデーションのロジックを一箇所に集めたくなる。それが終わったら次はパフォーマンスの問題だ。Facebookのアプリケーションなどを使ったことがある人はわかるだろうが、textboxで一文字入力するたびに画面がプチフリーズするうえ、ボタンを連打しようものならしばらくブラウザが固まってしまう。Facebookのアレはバリデーションの問題だけではないのだろうが、無関係でもないだろうとおもう。ともあれ、ユーザーの連続入力が終わるまでバリデーションを待機して別に悪いことはないだろう。</p>\\n<p>ここで問題になるのは、一体どこの関数呼び出しをdebounceするかという問題だ。</p>\\n<p>“純粋”関数縛りがあるのでreducerはなし。となるとActionCreatorかCallbackということになるが、ただでさえThunkやなんかのせいでカオスになりがちなActionCreatorにこれ以上余計なボイラープレートを噛ませたくない。\\nCallbackだが、例えばActionCreatorが常にPromiseを返すようにして終了を監視するようにすればあるいはバリデーションの非同期な呼び出しは可能かもしれないが、明らかに責務の範囲外で筋悪な実装のようにおもえる。</p>\\n<p>やはりActionをObserveしているReducerが、Storeへ引き起こす変更を検知してバリデーションを行うべきなのではないか。ですよね？</p>\\n<h2>そこでMiddleware（redux-debounced-action-dispatcher）</h2>\\n<p>実はReduxの各層においてActionをObserveしているのはReducerだけではない。もうひとつMiddlewareでも同様のことが可能だ。\\n(ReduxのこれはMiddlewareというにはなんでもかんでも実装可能すぎてどうなんだろうという気持ちがないでもない)</p>\\n<p>というわけで作ってみた。<br>\\n<a href=\\\"https://github.com/hachibeeDI/redux-debounced-action-dispatcher\\\">hachibeeDI/redux-debounced-action-dispatcher</a></p>\\n<p>サンプルにあるように、<code>TRIGGER_ACTIONS</code>にバリデーション（あるいはLocalStrageにキャッシュするとか）のキーとなるようなActionを宣言して、<code>DEBOUNCED_ACTION_TYPE</code>にそれを受けて発行させたいActionを宣言刷るだけというような使い方になる。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">import</span> createDebounceMiddlewareGenerator <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux-debounced-action-dispatcher'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token keyword\\\">const</span> TRIGGER_ACTIONS <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token string\\\">'HOGE_CHANGED'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'FOO_CHANGED'</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> VALIDATION_DEBOUNCE_TIME <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> DEBOUNCED_ACTION_TYPE <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'VALIDATE_ALL_DATA'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> debouncedValidationDispatcher <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createDebounceMiddlewareGenerator</span><span class=\\\"token punctuation\\\">(</span>\\n  TRIGGER_ACTIONS<span class=\\\"token punctuation\\\">,</span>\\n  DEBOUNCED_ACTION_TYPE<span class=\\\"token punctuation\\\">,</span>\\n  VALIDATION_DEBOUNCE_TIME<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStore</span><span class=\\\"token punctuation\\\">(</span>\\n  todoApp<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">applyMiddleware</span><span class=\\\"token punctuation\\\">(</span>debouncedValidationDispatcher<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>使いこなせるメンバーで構成されているならばredux-observableやredux-sagaなどが導入するEpicなんかで解決すればいいだろうが、これら2つのMiddlewareはそれなりに難解で、かつオーバーキルな印象がある。</p>\\n<p>僕の作ったMiddlewareの利点は簡単なことだ。<br>\\n逆に欠点はそもそもredux-actionsなしではカオスになりがちなActionの管理が、<code>TRIGGER_ACTIONS</code>が膨れ上がるとさらに意味不明になってしまうことだ。これは例えば正規表現のサポートを実装して、各アプリケーション内で厳格な命名規約を導入すれば防げるかもしれない。やる気が出たらやるかもしれない。</p>\\n<h2>まとめ</h2>\\n<p>ReduxでSPAのエラー情報の管理を一体どうやっているのかの話をあまり見かけないので僕なりの考えを書いてみた。</p>\\n<p>たぶんもっといい方法があるだろうとはおもうので教えてくださいお願いします。</p>\\n<p>今ブログを書きながらふと思いついたが、そもそもエラー情報をReduxのStoreで管理するのはやめて、例えばreselect （<a href=\\\"https://github.com/reactjs/reselect%EF%BC%89\\\">https://github.com/reactjs/reselect）</a> を使うようにするなんてのもありかもしれない。その場合、debounceは不可能になるがmemorizeしてくれるのでパフォーマンスへの影響も多少軽減できるのではないか。</p>\\n<p>まとまりがないけどもこちらからは以上です。</p>\",\"frontmatter\":{\"path\":\"/redux-debounced-action-dispatcher\",\"title\":\"Reduxにおけるバリデーションの実装パターンとReducerの呼び出し遅延について（debounced-action-dispatcherを作りました）\",\"date\":\"October 31, 2017\",\"category\":\"FrontEnd\",\"tags\":[\"JavaScript\",\"React\",\"Redux\"]}}},\"pathContext\":{\"path\":\"/redux-debounced-action-dispatcher\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---entry-redux-debounced-action-dispatcher-c9cb69a226f1c3f5ca2a.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Hatch tech blog\",\"author\":\"Ogura Daiki\"}},\"markdownRemark\":{\"id\":\"/Users/hachibee/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2017-10-31-redux-debounced-action-dispatcher/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>アイデアです。<br>\\nちなみにredux-observableやredux-sagaを導入している場合はそちらで解決したほうが良いんじゃないかとおもいます。</p>\\n<h2>MVXアプリケーションのバリデーションとパフォーマンス問題</h2>\\n<p>Reduxを使っていなかったとしても、Reactを使って素朴にアプリケーションを開発しているとある程度以上の規模になって発生するのがバリデーションのパフォーマンスではなかろうか。</p>\\n<p>最初は一つのinputに対応するプロパティの正当性を素朴に判断するだけだったのが、ある程度の規模になった時点で同一モデルの他のプロパティも一緒に合わせてみなければいけなくなったり、あるいは他のモデルの面倒もみないといけなくなったり。\\nそのうちに、あちこちに散らばっていたバリデーションのロジックを一箇所に集めたくなる。それが終わったら次はパフォーマンスの問題だ。Facebookのアプリケーションなどを使ったことがある人はわかるだろうが、textboxで一文字入力するたびに画面がプチフリーズするうえ、ボタンを連打しようものならしばらくブラウザが固まってしまう。Facebookのアレはバリデーションの問題だけではないのだろうが、無関係でもないだろうとおもう。ともあれ、ユーザーの連続入力が終わるまでバリデーションを待機して別に悪いことはないだろう。</p>\\n<p>ここで問題になるのは、一体どこの関数呼び出しをdebounceするかという問題だ。</p>\\n<p>“純粋”関数縛りがあるのでreducerはなし。となるとActionCreatorかCallbackということになるが、ただでさえThunkやなんかのせいでカオスになりがちなActionCreatorにこれ以上余計なボイラープレートを噛ませたくない。\\nCallbackだが、例えばActionCreatorが常にPromiseを返すようにして終了を監視するようにすればあるいはバリデーションの非同期な呼び出しは可能かもしれないが、明らかに責務の範囲外で筋悪な実装のようにおもえる。</p>\\n<p>やはりActionをObserveしているReducerが、Storeへ引き起こす変更を検知してバリデーションを行うべきなのではないか。ですよね？</p>\\n<h2>そこでMiddleware（redux-debounced-action-dispatcher）</h2>\\n<p>実はReduxの各層においてActionをObserveしているのはReducerだけではない。もうひとつMiddlewareでも同様のことが可能だ。\\n(ReduxのこれはMiddlewareというにはなんでもかんでも実装可能すぎてどうなんだろうという気持ちがないでもない)</p>\\n<p>というわけで作ってみた。<br>\\n<a href=\\\"https://github.com/hachibeeDI/redux-debounced-action-dispatcher\\\">hachibeeDI/redux-debounced-action-dispatcher</a></p>\\n<p>サンプルにあるように、<code>TRIGGER_ACTIONS</code>にバリデーション（あるいはLocalStrageにキャッシュするとか）のキーとなるようなActionを宣言して、<code>DEBOUNCED_ACTION_TYPE</code>にそれを受けて発行させたいActionを宣言刷るだけというような使い方になる。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">import</span> createDebounceMiddlewareGenerator <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'redux-debounced-action-dispatcher'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token keyword\\\">const</span> TRIGGER_ACTIONS <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token string\\\">'HOGE_CHANGED'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'FOO_CHANGED'</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> VALIDATION_DEBOUNCE_TIME <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">const</span> DEBOUNCED_ACTION_TYPE <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'VALIDATE_ALL_DATA'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> debouncedValidationDispatcher <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createDebounceMiddlewareGenerator</span><span class=\\\"token punctuation\\\">(</span>\\n  TRIGGER_ACTIONS<span class=\\\"token punctuation\\\">,</span>\\n  DEBOUNCED_ACTION_TYPE<span class=\\\"token punctuation\\\">,</span>\\n  VALIDATION_DEBOUNCE_TIME<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStore</span><span class=\\\"token punctuation\\\">(</span>\\n  todoApp<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">applyMiddleware</span><span class=\\\"token punctuation\\\">(</span>debouncedValidationDispatcher<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>使いこなせるメンバーで構成されているならばredux-observableやredux-sagaなどが導入するEpicなんかで解決すればいいだろうが、これら2つのMiddlewareはそれなりに難解で、かつオーバーキルな印象がある。</p>\\n<p>僕の作ったMiddlewareの利点は簡単なことだ。<br>\\n逆に欠点はそもそもredux-actionsなしではカオスになりがちなActionの管理が、<code>TRIGGER_ACTIONS</code>が膨れ上がるとさらに意味不明になってしまうことだ。これは例えば正規表現のサポートを実装して、各アプリケーション内で厳格な命名規約を導入すれば防げるかもしれない。やる気が出たらやるかもしれない。</p>\\n<h2>まとめ</h2>\\n<p>ReduxでSPAのエラー情報の管理を一体どうやっているのかの話をあまり見かけないので僕なりの考えを書いてみた。</p>\\n<p>たぶんもっといい方法があるだろうとはおもうので教えてくださいお願いします。</p>\\n<p>今ブログを書きながらふと思いついたが、そもそもエラー情報をReduxのStoreで管理するのはやめて、例えばreselect （<a href=\\\"https://github.com/reactjs/reselect%EF%BC%89\\\">https://github.com/reactjs/reselect）</a> を使うようにするなんてのもありかもしれない。その場合、debounceは不可能になるがmemorizeしてくれるのでパフォーマンスへの影響も多少軽減できるのではないか。</p>\\n<p>まとまりがないけどもこちらからは以上です。</p>\",\"frontmatter\":{\"path\":\"/redux-debounced-action-dispatcher\",\"title\":\"Reduxにおけるバリデーションの実装パターンとReducerの呼び出し遅延について（debounced-action-dispatcherを作りました）\",\"date\":\"October 31, 2017\",\"category\":\"FrontEnd\",\"tags\":[\"JavaScript\",\"React\",\"Redux\"]}}},\"pathContext\":{\"path\":\"/redux-debounced-action-dispatcher\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/entry-redux-debounced-action-dispatcher.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/entry-redux-debounced-action-dispatcher.json\n// module chunks = 82941879582923"],"sourceRoot":""}