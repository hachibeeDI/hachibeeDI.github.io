{"version":3,"sources":["webpack:///path---entry-make-pthons-async-easy-3e24a5f4f20356c1296e.js","webpack:///./.cache/json/entry-make-pthons-async-easy.json"],"names":["webpackJsonp","407","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","path","date","category","tags","pathContext","next","prev"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,kBAAAC,OAAA,gBAAkDC,gBAAmBC,GAAA,0JAAAC,KAAA,6/RAAg0LC,aAAopHC,KAAA,yBAAAN,MAAA,2BAAAO,KAAA,mBAAAC,SAAA,SAAAC,MAAA,2BAAmJC,aAAgBJ,KAAA,yBAAAK,MAAwCN,aAAeL,MAAA,mCAAAM,KAAA,qCAAsFM,MAASP,aAAeL,MAAA,4EAAAM,KAAA","file":"path---entry-make-pthons-async-easy-3e24a5f4f20356c1296e.js","sourcesContent":["webpackJsonp([80242908539581],{\n\n/***/ 407:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Hatch tech blog\",\"author\":\"Ogura Daiki\"}},\"markdownRemark\":{\"id\":\"/Users/hachibee/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2018-1-16-make-Pythons-async-easy/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Pythonのasync関数を扱いやすくするライブラリの紹介</h2>\\n<p>（最後に追記があります）</p>\\n<p>最新のPythonでは、JavaScriptのようにasync関数を使うことができるようになっています。しかしあまり普及しているようにはみえません。<br>\\nコミュニティの性質上いまだにPython2がのさばっていることや、JavaScriptのように非同期前提の設計にAPIが（まだ）なっていないなどの理由があるんじゃあないかと推測していますが、もう１つAPIが<s>古臭い</s>少々複雑であるというのも少なからず影響しているかとおもいます。</p>\\n<p><a href=\\\"https://docs.python.org/3.6/library/asyncio-task.html\\\">https://docs.python.org/3.6/library/asyncio-task.html</a></p>\\n<p>こちらがasync周りのドキュメントになっていますが、これだけ読んでも基本的な使い方ですらピンとくる人はなかなか少ないんじゃないかとおもいます。<br>\\n少なくともJavaScriptからやってきてこれを読んだ人は面喰らうのではないでしょうか。</p>\\n<p>ちなみに僕は何度も読んで理解したつもりにはなるのですが、暫く経つと何もわからなくなってしまいます。<br>\\nこの記事も失われつつある記憶にすがりつつ書いてます。よろしくお願いします。</p>\\n<h2>CoroutineとFuture</h2>\\n<p>まずPythonの非同期処理において我々ユーザーが扱うことになるのが、CoroutineとFuture（Promiseみたいなものです）というオブジェクトです。またイベントループも我々の手で明示的に作成する必要があります。<br>\\n（Taskというものもあるのですがややこしくなるので割愛します）</p>\\n<p>JavaScriptではasync関数がPromiseを返しますが、Pythonで帰ってくるのはあくまでCoroutineで、Futureではありません。<br>\\nまた、Coroutine実行のスケジューリングなどもユーザーが自分の手でやる必要があります。これによって汎用性が増し、最適化の余地も広がる（たぶん）のですが、反面かなり読むのがしんどいコードが出来上がります。つーかこんなAPI覚えんの無理だよ！！！ 秒で忘れるわ！！</p>\\n<p>というわけで簡単なラッパーライブラリを作りました。</p>\\n<h2>Python asyncio toolkit for Humans™ ことfutures-shell</h2>\\n<p>ほんとはfuturifyって名前にしたかったんですが使われてました。futuristも使われてました。僕の貧弱なボキャブラリーでは他に良い名前が思い浮かびませんでした。<br>\\nちなみに煽り文はrequestsからインスパイアされました。あれもurllibという非人間的APIを使いやすくラップしたものでしたね。</p>\\n<p>Pythonのasync関数はボイラープレートコードが多いです。例えばasync関数から計算結果を取り出すためのコードは公式ドキュメントですと</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">import</span> asyncio\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">slow_operation</span><span class=\\\"token punctuation\\\">(</span>future<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">await</span> asyncio<span class=\\\"token punctuation\\\">.</span>sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    future<span class=\\\"token punctuation\\\">.</span>set_result<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Future is done!'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nloop <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>get_event_loop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nfuture <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>Future<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nasyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>slow_operation<span class=\\\"token punctuation\\\">(</span>future<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\nloop<span class=\\\"token punctuation\\\">.</span>run_until_complete<span class=\\\"token punctuation\\\">(</span>future<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>future<span class=\\\"token punctuation\\\">.</span>result<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\nloop<span class=\\\"token punctuation\\\">.</span>close<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>というようになってます。</p>\\n<p>引数でfuture渡してsetter経由で計算結果セット…なんて毎回やりたい作業じゃないはずです。そもそもこれだとasync関数からawaitで呼ぶときとイベントループ外から呼ぶときで方式変わっちゃって汎用性低くね？ やばくね？</p>\\n<p>というわけでこれです。<a href=\\\"https://github.com/hachibeeDI/futures-shell\\\">hachibeeDI/futures-shell</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">from</span> asyncio <span class=\\\"token keyword\\\">import</span> get_event_loop<span class=\\\"token punctuation\\\">,</span> sleep\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">from</span> futures_shell <span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">(</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>     futurify<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>     unwrap<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> @futurify\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">slow_txt_return</span><span class=\\\"token punctuation\\\">(</span>txt<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>     <span class=\\\"token keyword\\\">await</span> sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>     <span class=\\\"token keyword\\\">return</span> f<span class=\\\"token string\\\">'{txt} is done!'</span>\\n\\n\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> loop <span class=\\\"token operator\\\">=</span> get_event_loop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> txt_result <span class=\\\"token operator\\\">=</span> unwrap<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> slow_txt_return<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Future'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>txt_result<span class=\\\"token punctuation\\\">)</span>\\nFuture <span class=\\\"token keyword\\\">is</span> Done!\\n</code></pre>\\n      </div>\\n<p>ワースゴーイ！ シンプルー！</p>\\n<p><code>futurify</code> をデコレーターにつけることで自動的にasync関数がFutureを返すようになります。ちなみにですが、普通の同期関数につけることも可能で、その場合はその関数の結果がFutureに入ります。</p>\\n<h2>まとめ</h2>\\n<p>ドキュメントを雑に読んで思いつきで実装したライブラリなので実用性皆無だとおもいますが、やたら登場する役者が多い上に低レイヤな解説に終始している公式の説明を理解するためのお供にどうでしょうか。</p>\\n<p><a href=\\\"https://github.com/aio-libs\\\">https://github.com/aio-libs</a> みたいなものも登場しているので、徐々にですがPythonでも非同期関係のAPIが充実していくといいですね！ おしまい。</p>\\n<h2>追記</h2>\\n<p>もう一度ドキュメントを読み返していたら、実は僕のしょうもないラッパーなしでももうちょっと簡単に書けることが判明。<br>\\n実は <code>ensure_future</code> はcoroutineを渡された場合、Future(Task)化したオブジェクトを返り値に持ち、 <code>run_until_complete</code> はFutureの中身をunwrapするようです。</p>\\n<p>つまり最初に提示した公式のexampleは以下のように書き換えることが可能です</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">import</span> asyncio\\n\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">slow_operation</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">await</span> asyncio<span class=\\\"token punctuation\\\">.</span>sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'Future is done!'</span>\\n\\n\\nloop <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>get_event_loop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nresult <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>slow_operation<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\nunwraped_result <span class=\\\"token operator\\\">=</span> loop<span class=\\\"token punctuation\\\">.</span>run_until_complete<span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>unwraped_result<span class=\\\"token punctuation\\\">)</span>\\nloop<span class=\\\"token punctuation\\\">.</span>close<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>……これでいいじゃん。さよなら僕の1時間。</p>\\n<p>もちろん僕の読み方が雑（特に英文を読むときはかなり酷い）なのもあるのですが、正直公式の例は間違ってはいないし丁寧でありつつも非効率的な書き方を助長するようになっているような気がしてなりません……。<br>\\n実際、世の中のasync関連の解説の多くがensure<em>futureとrun</em>until_completeが返り値を持つことに触れてません。</p>\\n<p>うーん、わかりやすさよりも正しさや詳細さを優先するということなのでしょうか……。<br>\\n今後、静的型検査の機能が公式にマージされたら各関数の型が明示されるようになってドキュメントもわかりやすくなるかもしれませんね。以上追記でした。</p>\",\"frontmatter\":{\"path\":\"make-Pthons-async-easy\",\"title\":\"Pythonのasync関数を扱いやすくする方法\",\"date\":\"January 16, 2018\",\"category\":\"Python\",\"tags\":[\"Python\",\"async/await\"]}}},\"pathContext\":{\"path\":\"make-Pthons-async-easy\",\"next\":{\"frontmatter\":{\"title\":\"Python製のJSON-RPCサーバーをAsyncに対応させた\",\"path\":\"async-supported-json-rpc-handler\"}},\"prev\":{\"frontmatter\":{\"title\":\"現代的な補完システムであるLanguage Server ProtocolとJavaScript版の運用、そしてVimとの連動についての雑なまとめ\",\"path\":\"how-to-get-javascript-intellisense-in-Vim\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---entry-make-pthons-async-easy-3e24a5f4f20356c1296e.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Hatch tech blog\",\"author\":\"Ogura Daiki\"}},\"markdownRemark\":{\"id\":\"/Users/hachibee/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2018-1-16-make-Pythons-async-easy/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Pythonのasync関数を扱いやすくするライブラリの紹介</h2>\\n<p>（最後に追記があります）</p>\\n<p>最新のPythonでは、JavaScriptのようにasync関数を使うことができるようになっています。しかしあまり普及しているようにはみえません。<br>\\nコミュニティの性質上いまだにPython2がのさばっていることや、JavaScriptのように非同期前提の設計にAPIが（まだ）なっていないなどの理由があるんじゃあないかと推測していますが、もう１つAPIが<s>古臭い</s>少々複雑であるというのも少なからず影響しているかとおもいます。</p>\\n<p><a href=\\\"https://docs.python.org/3.6/library/asyncio-task.html\\\">https://docs.python.org/3.6/library/asyncio-task.html</a></p>\\n<p>こちらがasync周りのドキュメントになっていますが、これだけ読んでも基本的な使い方ですらピンとくる人はなかなか少ないんじゃないかとおもいます。<br>\\n少なくともJavaScriptからやってきてこれを読んだ人は面喰らうのではないでしょうか。</p>\\n<p>ちなみに僕は何度も読んで理解したつもりにはなるのですが、暫く経つと何もわからなくなってしまいます。<br>\\nこの記事も失われつつある記憶にすがりつつ書いてます。よろしくお願いします。</p>\\n<h2>CoroutineとFuture</h2>\\n<p>まずPythonの非同期処理において我々ユーザーが扱うことになるのが、CoroutineとFuture（Promiseみたいなものです）というオブジェクトです。またイベントループも我々の手で明示的に作成する必要があります。<br>\\n（Taskというものもあるのですがややこしくなるので割愛します）</p>\\n<p>JavaScriptではasync関数がPromiseを返しますが、Pythonで帰ってくるのはあくまでCoroutineで、Futureではありません。<br>\\nまた、Coroutine実行のスケジューリングなどもユーザーが自分の手でやる必要があります。これによって汎用性が増し、最適化の余地も広がる（たぶん）のですが、反面かなり読むのがしんどいコードが出来上がります。つーかこんなAPI覚えんの無理だよ！！！ 秒で忘れるわ！！</p>\\n<p>というわけで簡単なラッパーライブラリを作りました。</p>\\n<h2>Python asyncio toolkit for Humans™ ことfutures-shell</h2>\\n<p>ほんとはfuturifyって名前にしたかったんですが使われてました。futuristも使われてました。僕の貧弱なボキャブラリーでは他に良い名前が思い浮かびませんでした。<br>\\nちなみに煽り文はrequestsからインスパイアされました。あれもurllibという非人間的APIを使いやすくラップしたものでしたね。</p>\\n<p>Pythonのasync関数はボイラープレートコードが多いです。例えばasync関数から計算結果を取り出すためのコードは公式ドキュメントですと</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">import</span> asyncio\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">slow_operation</span><span class=\\\"token punctuation\\\">(</span>future<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">await</span> asyncio<span class=\\\"token punctuation\\\">.</span>sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    future<span class=\\\"token punctuation\\\">.</span>set_result<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Future is done!'</span><span class=\\\"token punctuation\\\">)</span>\\n\\nloop <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>get_event_loop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nfuture <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>Future<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nasyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>slow_operation<span class=\\\"token punctuation\\\">(</span>future<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\nloop<span class=\\\"token punctuation\\\">.</span>run_until_complete<span class=\\\"token punctuation\\\">(</span>future<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>future<span class=\\\"token punctuation\\\">.</span>result<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\nloop<span class=\\\"token punctuation\\\">.</span>close<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>というようになってます。</p>\\n<p>引数でfuture渡してsetter経由で計算結果セット…なんて毎回やりたい作業じゃないはずです。そもそもこれだとasync関数からawaitで呼ぶときとイベントループ外から呼ぶときで方式変わっちゃって汎用性低くね？ やばくね？</p>\\n<p>というわけでこれです。<a href=\\\"https://github.com/hachibeeDI/futures-shell\\\">hachibeeDI/futures-shell</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">from</span> asyncio <span class=\\\"token keyword\\\">import</span> get_event_loop<span class=\\\"token punctuation\\\">,</span> sleep\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">from</span> futures_shell <span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">(</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>     futurify<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>     unwrap<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> @futurify\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">slow_txt_return</span><span class=\\\"token punctuation\\\">(</span>txt<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>     <span class=\\\"token keyword\\\">await</span> sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>     <span class=\\\"token keyword\\\">return</span> f<span class=\\\"token string\\\">'{txt} is done!'</span>\\n\\n\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> loop <span class=\\\"token operator\\\">=</span> get_event_loop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> txt_result <span class=\\\"token operator\\\">=</span> unwrap<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> slow_txt_return<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Future'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>txt_result<span class=\\\"token punctuation\\\">)</span>\\nFuture <span class=\\\"token keyword\\\">is</span> Done!\\n</code></pre>\\n      </div>\\n<p>ワースゴーイ！ シンプルー！</p>\\n<p><code>futurify</code> をデコレーターにつけることで自動的にasync関数がFutureを返すようになります。ちなみにですが、普通の同期関数につけることも可能で、その場合はその関数の結果がFutureに入ります。</p>\\n<h2>まとめ</h2>\\n<p>ドキュメントを雑に読んで思いつきで実装したライブラリなので実用性皆無だとおもいますが、やたら登場する役者が多い上に低レイヤな解説に終始している公式の説明を理解するためのお供にどうでしょうか。</p>\\n<p><a href=\\\"https://github.com/aio-libs\\\">https://github.com/aio-libs</a> みたいなものも登場しているので、徐々にですがPythonでも非同期関係のAPIが充実していくといいですね！ おしまい。</p>\\n<h2>追記</h2>\\n<p>もう一度ドキュメントを読み返していたら、実は僕のしょうもないラッパーなしでももうちょっと簡単に書けることが判明。<br>\\n実は <code>ensure_future</code> はcoroutineを渡された場合、Future(Task)化したオブジェクトを返り値に持ち、 <code>run_until_complete</code> はFutureの中身をunwrapするようです。</p>\\n<p>つまり最初に提示した公式のexampleは以下のように書き換えることが可能です</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">import</span> asyncio\\n\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">slow_operation</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">await</span> asyncio<span class=\\\"token punctuation\\\">.</span>sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'Future is done!'</span>\\n\\n\\nloop <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>get_event_loop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nresult <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>ensure_future<span class=\\\"token punctuation\\\">(</span>slow_operation<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\nunwraped_result <span class=\\\"token operator\\\">=</span> loop<span class=\\\"token punctuation\\\">.</span>run_until_complete<span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>unwraped_result<span class=\\\"token punctuation\\\">)</span>\\nloop<span class=\\\"token punctuation\\\">.</span>close<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>……これでいいじゃん。さよなら僕の1時間。</p>\\n<p>もちろん僕の読み方が雑（特に英文を読むときはかなり酷い）なのもあるのですが、正直公式の例は間違ってはいないし丁寧でありつつも非効率的な書き方を助長するようになっているような気がしてなりません……。<br>\\n実際、世の中のasync関連の解説の多くがensure<em>futureとrun</em>until_completeが返り値を持つことに触れてません。</p>\\n<p>うーん、わかりやすさよりも正しさや詳細さを優先するということなのでしょうか……。<br>\\n今後、静的型検査の機能が公式にマージされたら各関数の型が明示されるようになってドキュメントもわかりやすくなるかもしれませんね。以上追記でした。</p>\",\"frontmatter\":{\"path\":\"make-Pthons-async-easy\",\"title\":\"Pythonのasync関数を扱いやすくする方法\",\"date\":\"January 16, 2018\",\"category\":\"Python\",\"tags\":[\"Python\",\"async/await\"]}}},\"pathContext\":{\"path\":\"make-Pthons-async-easy\",\"next\":{\"frontmatter\":{\"title\":\"Python製のJSON-RPCサーバーをAsyncに対応させた\",\"path\":\"async-supported-json-rpc-handler\"}},\"prev\":{\"frontmatter\":{\"title\":\"現代的な補完システムであるLanguage Server ProtocolとJavaScript版の運用、そしてVimとの連動についての雑なまとめ\",\"path\":\"how-to-get-javascript-intellisense-in-Vim\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/entry-make-pthons-async-easy.json\n// module id = 407\n// module chunks = 80242908539581"],"sourceRoot":""}