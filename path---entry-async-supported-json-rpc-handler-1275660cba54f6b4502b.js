webpackJsonp([0x644d6f20759d],{409:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Hatch tech blog",author:"Ogura Daiki"}},markdownRemark:{id:"/Users/dogura/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2018-2-12-async-supported-json-rpc-handler/index.md absPath of file >>> MarkdownRemark",html:'<h2>自作のJSON_-RPCサーバーをPython3のasync/await関数をサポートするように改良しました</h2>\n<p>これです。<br>\n<a href="https://github.com/hachibeeDI/py-json-rpc">hachibeeDI/py-json-rpc</a></p>\n<p>結構まえに書いた <a href="http://hachibeechan.hateblo.jp/entry/try-json-rpc-great-good">REST APIに消耗したらJSON RPCを試そう</a> という記事で紹介してたアレですが、ちょっと前になんとなく非同期関数をサポートするように改修しました。<br>\n記事を書いた当初はぶっちゃけはやんねーだろとタカをくくっていたGraphQLはアプリバックエンド用途で順調に流行りつつあり、それ以外のRPC的な領分ではgRPCが使われているような雰囲気をバリバリに感じている昨今ですが……。</p>\n<p>JSON-RPCに限ったことではないですが、Pythonはasyncが導入されてから日が浅い……わけではないんですけども、いまだにold Pythonにこだわり続けるアホがたくさんいるせいで全く使われている気配がありません。<br>\n（いちおう <a href="https://github.com/aio-libs">aio-libs</a> のようなプロジェクトは存在していますが……）  </p>\n<p>そのせいでせっかく導入されたいけてる新機能を試す機会がありません。またPythonのasyncやcoroutineの仕様やインターフェースがやたらと複雑なせいでドキュメントをチラ見するだけでは全く使いこなせる気配がありません。マジ無理。<br>\nそういう意味で、セルフ教材的な意味合いを込めて実装した次第であります。</p>\n<p>実用上のメリットとしましては、JSON-RPCの仕様に含まれているバッチ処理の高速化がのぞめます。<br>\n例えばスクレイピングをしてくるような、呼び出しに3秒かかる関数が複数ある場合、 <code>aiohttp</code> などのライブラリを使ったasync関数をpy-json-rpcのレジスターに登録すれば、バッチ処理で複数呼んでも（コア数などによって制限はありますけど）3秒+αで呼び出しが完了します。やったね！<br>\n調べてないですが、たぶんPythonでは非同期の並列処理に対応している唯一のJSON-RPCハンドラーなんじゃないんでしょうか。しらんけど。</p>\n<p>恐らくPython2であってもsubprocessやthreadを利用することでバッチ処理の並列化は可能なんじゃないかとおもいますが、どちらも実装が複雑化してしまうリスクがありますし、とりわけPythonのthreadはオーバーヘッドが大きすぎるため通常の呼び出しにも影響をあたえる可能性があります。しかしasync/awaitならそういった問題は生じません（たぶん）。</p>\n<h2>サンプル</h2>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>\napp <span class="token operator">=</span> Registrator<span class="token punctuation">(</span>loop<span class="token operator">=</span>loop<span class="token punctuation">)</span>\n\n\n@app<span class="token punctuation">.</span>register\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">plus_rpc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y\n\n\n@app<span class="token punctuation">.</span>register\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">minus</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> x <span class="token operator">-</span> y\n\n\n@app<span class="token punctuation">.</span>register\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">heavy_request</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">\'start heavy request... {a}sec\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'end heavy request...\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token string">\'home page!\'</span>\n\n\n<span class="token keyword">def</span> <span class="token function">test_plain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">"""\n    登録した関数はPython内部からふつうによびだすこともできるよ！\n    """</span>\n    result <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>plus_rpc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    result <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n    <span class="token keyword">assert</span> result <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">,</span> result\n\n\n<span class="token keyword">def</span> <span class="token function">test_positional_rpc_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    rpc_result <span class="token operator">=</span> app<span class="token punctuation">.</span>dispatch<span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string">\'jsonrpc\'</span><span class="token punctuation">:</span> <span class="token string">\'2.0\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'method\'</span><span class="token punctuation">:</span> <span class="token string">\'plus_rpc\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'params\'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token string">\'id\'</span><span class="token punctuation">:</span> <span class="token number">111</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">assert</span> rpc_result<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">\'result\'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">,</span> rpc_result\n</code></pre>\n      </div>\n<p>はい。もちろんasync以外の関数も登録できますくわしくはREADMEとかテストコードで。</p>\n<p>クライアントリッチなWebアプリが普通になっている現代でサーバーサイドMVCは明らかに不要で、リモートから呼び出しできる関数として公開しておくのが一番だとおもうんですけどどうでしょうか？ 結局RESTはモヤッとした思想だけが存在してるだけで現実世界に適用できるものではありませんでしたし、GraphQLはリソースをひっぱってくるためのDSL（頑張れば魔改造はできそうですが……）なので、例えばマッシュアップした機能を提供するサーバーの用途にはそぐわないわけです。<br>\nそういう意味でJSON-RPCはパパッとなんかを作るには最適なんじゃあないかなーどうなのかなー。<br>\nPythonの型定義からJSONSchemaや最近話題のprotobufの定義からエンドポイントに対応する <code>.d.ts</code> を生成したりしたら大規模アプリでも一気にはかどりそうかなーとも考えたのですが、Pythonでそれをやっていくと手軽さが失われるのでイマイチかもですね。</p>\n<p>ちなみにですが、サーバーとかいってましたがこのライブラリ自体には特定のプロトコルをサポートしたサーバーの機能はありません。ハンドラーのサンプルのようなものは組み込まれていますが。基本的にはユーザーが自身で実装する形になります（簡単です）。<br>\nなおサンプルにもあるように登録した関数はPython内部から普通の関数として呼び出すこともできるので、MVCのときに生じていたコントローラーを薄くしろ問題はありません。また前回の実装を改良して、複数のエンドポイントを持てるようにしたので、例えばとても時間がかかるバッチ処理をトリガーして、終了を待ちたいというようなユースケースがあった場合、HTTPで関数を呼び出して終了の通知はWebSocketで受け取る何てことも可能です。やろうとおもえばいちおう。</p>\n<h2>まとめ</h2>\n<p>みなさんはやく3にあげてはやくおねがいしますはやくはやくいそいではやく。</p>\n<p>2020年にはサポートが切れるうえにもはや言語仕様的にも使うメリットが何も存在しない処理系を使い続ける人たちは二度とFAXとかエクセル方眼紙をバカにしてはいけない。Unicodeまわりの変更が云々とか言っている人たちはそもそもPython2時点での仕様も理解できていなくて危険なのでなおさら3に移行したほうがいい。</p>\n<p>コアのロジックは200行くらいなのでPythonのasyncがどういう感じのものなのかを理解したい人にもいいかもしれないですね。<br>\n突貫工事でasync対応したので読みやすさは保証しません。あとロギングも一切していないのでやんないとですね。</p>\n<p>以上。</p>',frontmatter:{path:"async-supported-json-rpc-handler",title:"Python製のJSON-RPCサーバーをAsyncに対応させた",date:"February 12, 2018",category:"Python",tags:["Python","JSON-RPC","Async"]}}},pathContext:{path:"async-supported-json-rpc-handler",next:{frontmatter:{title:"Pythonで同期関数と非同期関数を統一的に扱う",path:"unify-sync-and-async-function-in-python"}},prev:{frontmatter:{title:"React Native 101 （ビギナー忘備録）",path:"react-native-begginers-guide"}}}}}});
//# sourceMappingURL=path---entry-async-supported-json-rpc-handler-1275660cba54f6b4502b.js.map