{"version":3,"sources":["webpack:///path---entry-unify-sync-and-async-function-in-python-323f7635dce2af656398.js","webpack:///./.cache/json/entry-unify-sync-and-async-function-in-python.json"],"names":["webpackJsonp","410","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","path","date","category","tags","pathContext","next","prev"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,kBAAAC,OAAA,gBAAkDC,gBAAmBC,GAAA,0KAAAC,KAAA,w4CAAAC,aAAmlDC,KAAA,0CAAAN,MAAA,2BAAAO,KAAA,oBAAAC,SAAA,SAAAC,MAAA,qBAA+JC,aAAgBJ,KAAA,0CAAAK,KAAA,KAAAC,MAAqEP,aAAeL,MAAA,mCAAAM,KAAA","file":"path---entry-unify-sync-and-async-function-in-python-323f7635dce2af656398.js","sourcesContent":["webpackJsonp([112910364600428],{\n\n/***/ 410:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Hatch tech blog\",\"author\":\"Ogura Daiki\"}},\"markdownRemark\":{\"id\":\"/Users/hachibee/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2018-2-21-unify-sync-and-async-function-in-python/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Blockingな関数をasync化する方法</h2>\\n<p><code>EventLoop.run_in_executor</code> を使いましょう（結論）。<br>\\n<a href=\\\"https://docs.python.org/3/library/asyncio-eventloop.html\\\">https://docs.python.org/3/library/asyncio-eventloop.html</a></p>\\n<p>関数と引数を渡すとExecutorのコンテクストで実行してAwaitable(coroutine)を返してくれます。<br>\\n第一引数のexecutorは省略可能で、その場合は実行環境に応じたものが自動的に使われます。ThreadベースとProcessベースで性質が違いますので要求に応じて使い分けましょう。<br>\\nExecutorにもよりますが引数はシリアライズ可能なものに限ります。名前付き引数はpartialで事前にbindしておく必要があります。</p>\\n<p>なおWindows環境特有の問題としてKeyboardInterruptをうまく扱えないみたいな問題があるようなのですがWindowsでプログラをミングすることがないので特に確かめたりとかはしてしません。<br>\\n参考: => <a href=\\\"https://gist.github.com/lambdalisue/05d5654bd1ec04992ad316d50924137c\\\">https://gist.github.com/lambdalisue/05d5654bd1ec04992ad316d50924137c</a></p>\\n<h2>サンプル</h2>\\n<p>おざなりですんません。<br>\\nチラシの裏レベルの書きなぐりですがいろいろなパターンの実装があります。手元で実行してみるとわかりやすいかとおもいます。</p>\\n<script src=\\\"https://gist.github.com/hachibeeDI/f38bc0496fc9e29ddb3f45c08b88432d.js\\\"></script>\\n<p>3秒の同期的スリープ関数を三回実行するサンプルでも、executor越しで実行すると並列に行われている様子が観察できるかとおもいます。</p>\\n<p><code>run_in_executor</code> はcoroutineを返しますので、async関数内であれば結果をawaitで待つことも可能です。</p>\\n<p>何故かPythonの非同期関係のサンプルは副作用ベースで記述されているものばかりで返り値を持てないのかなとおもってしまわなくもなくはなくないですがちゃんと持てます。</p>\\n<h2>まとめ</h2>\\n<p>asyncを使いはじめると既存の関数も同様のインターフェースで統一的に並列実行したくなることがかなりあるかとおもいます。<br>\\nそういうときに便利だとおもいます。</p>\\n<p>ただし適当に使っても高速化するかどうかは微妙なのでボトルネックに対して使うこと、そしてネックになっているのがIOなのかCPUなのかを検証してから使うようにするといいんじゃないかなーとおもいました。</p>\\n<p>終了。</p>\",\"frontmatter\":{\"path\":\"unify-sync-and-async-function-in-python\",\"title\":\"Pythonで同期関数と非同期関数を統一的に扱う\",\"date\":\"February 21, 2018\",\"category\":\"Python\",\"tags\":[\"Python\",\"Async\"]}}},\"pathContext\":{\"path\":\"unify-sync-and-async-function-in-python\",\"next\":null,\"prev\":{\"frontmatter\":{\"title\":\"Python製のJSON-RPCサーバーをAsyncに対応させた\",\"path\":\"async-supported-json-rpc-handler\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---entry-unify-sync-and-async-function-in-python-323f7635dce2af656398.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Hatch tech blog\",\"author\":\"Ogura Daiki\"}},\"markdownRemark\":{\"id\":\"/Users/hachibee/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2018-2-21-unify-sync-and-async-function-in-python/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Blockingな関数をasync化する方法</h2>\\n<p><code>EventLoop.run_in_executor</code> を使いましょう（結論）。<br>\\n<a href=\\\"https://docs.python.org/3/library/asyncio-eventloop.html\\\">https://docs.python.org/3/library/asyncio-eventloop.html</a></p>\\n<p>関数と引数を渡すとExecutorのコンテクストで実行してAwaitable(coroutine)を返してくれます。<br>\\n第一引数のexecutorは省略可能で、その場合は実行環境に応じたものが自動的に使われます。ThreadベースとProcessベースで性質が違いますので要求に応じて使い分けましょう。<br>\\nExecutorにもよりますが引数はシリアライズ可能なものに限ります。名前付き引数はpartialで事前にbindしておく必要があります。</p>\\n<p>なおWindows環境特有の問題としてKeyboardInterruptをうまく扱えないみたいな問題があるようなのですがWindowsでプログラをミングすることがないので特に確かめたりとかはしてしません。<br>\\n参考: => <a href=\\\"https://gist.github.com/lambdalisue/05d5654bd1ec04992ad316d50924137c\\\">https://gist.github.com/lambdalisue/05d5654bd1ec04992ad316d50924137c</a></p>\\n<h2>サンプル</h2>\\n<p>おざなりですんません。<br>\\nチラシの裏レベルの書きなぐりですがいろいろなパターンの実装があります。手元で実行してみるとわかりやすいかとおもいます。</p>\\n<script src=\\\"https://gist.github.com/hachibeeDI/f38bc0496fc9e29ddb3f45c08b88432d.js\\\"></script>\\n<p>3秒の同期的スリープ関数を三回実行するサンプルでも、executor越しで実行すると並列に行われている様子が観察できるかとおもいます。</p>\\n<p><code>run_in_executor</code> はcoroutineを返しますので、async関数内であれば結果をawaitで待つことも可能です。</p>\\n<p>何故かPythonの非同期関係のサンプルは副作用ベースで記述されているものばかりで返り値を持てないのかなとおもってしまわなくもなくはなくないですがちゃんと持てます。</p>\\n<h2>まとめ</h2>\\n<p>asyncを使いはじめると既存の関数も同様のインターフェースで統一的に並列実行したくなることがかなりあるかとおもいます。<br>\\nそういうときに便利だとおもいます。</p>\\n<p>ただし適当に使っても高速化するかどうかは微妙なのでボトルネックに対して使うこと、そしてネックになっているのがIOなのかCPUなのかを検証してから使うようにするといいんじゃないかなーとおもいました。</p>\\n<p>終了。</p>\",\"frontmatter\":{\"path\":\"unify-sync-and-async-function-in-python\",\"title\":\"Pythonで同期関数と非同期関数を統一的に扱う\",\"date\":\"February 21, 2018\",\"category\":\"Python\",\"tags\":[\"Python\",\"Async\"]}}},\"pathContext\":{\"path\":\"unify-sync-and-async-function-in-python\",\"next\":null,\"prev\":{\"frontmatter\":{\"title\":\"Python製のJSON-RPCサーバーをAsyncに対応させた\",\"path\":\"async-supported-json-rpc-handler\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/entry-unify-sync-and-async-function-in-python.json\n// module id = 410\n// module chunks = 112910364600428"],"sourceRoot":""}