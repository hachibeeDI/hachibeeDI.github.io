webpackJsonp([93741582871333],{418:function(t,e){t.exports={data:{site:{siteMetadata:{title:"Hatch tech blog",author:"Ogura Daiki"}},markdownRemark:{id:"/Users/dogura/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2018-04-14-react-native-begginers-guide/index.md absPath of file >>> MarkdownRemark",html:'<h2>はじめに</h2>\n<p>Reactの知識でマルチプラットフォームなモバイルアプリが作れちゃうと有名なReactNativeの初心者ガイド by 初心者です。<br>\n学習しながらの走り書きなので新しい知見とかがあったら適時アップデートします。</p>\n<h2>Setup編</h2>\n<h3>拡張子</h3>\n<p><code>.jsx</code>は使えない。<code>.js</code>前提。<br>\nめっちゃ頑張ればいじれそうだけどやる意味ないので諦めるべし。</p>\n<h3>babel pluginsの導入</h3>\n<p>npm installしてから<code>.babelrc</code>に追加する。</p>\n<h3>flow or TypeScript</h3>\n<p>どっちでもいいけど、</p>\n<ul>\n<li>\n<p><code>react-native init</code> で作られるコードがflowを前提にしてる</p>\n</li>\n<li>\n<p>ReactNativeのビルドプロセスはTypeScriptを対象にしていないので自前でワークフローを作る必要があってめんどくさい</p>\n</li>\n<li>\n<p>TypeScriptの仕様があんま好きじゃない（個人の意見です）</p>\n</li>\n</ul>\n<p>ので当分はflowでやっていけばいーんじゃない？ みたいなかんじ。</p>\n<h2>View編</h2>\n<h2>組み込みのDOM Componentは基本的に利用できない</h2>\n<p>基本的に <code>import {Text, View} from "react-native";</code> みたいにしてreact-nativeが用意しているcomponentを使うべし。</p>\n<p>この制約によってたとえStatelessFunctionalComponentであってもWebとReactNativeで共用するのは不可能になった……けど、そもそもモバイルアプリとWebでViewを共用できるわけないだろいい加減にしろ！<br>\nPresentationに関わらないHoCは流用できる。</p>\n<h2>ListViewよりもFlatList</h2>\n<p>ListViewはnativeのAPIを直訳しましたみたいな感じでヤベーなとおもったらだいぶマシっぽいのがあった。それがFlatList。<br>\n基本はこっち使おう。というかListViewはdeprecated。</p>\n<p><a href="https://facebook.github.io/react-native/docs/flatlist.html">https://facebook.github.io/react-native/docs/flatlist.html</a></p>\n<h2>Applicaion構築編</h2>\n<h3>永続化Storage</h3>\n<p>当たり前だけどNativeなので専用のlibが必要。\nReduxを使っている場合、middlewareを使ってStoreと連携するかActionCreatorで個別にハンドリングする（ダサい）かの二択になりそう。</p>\n<ul>\n<li><a href="https://github.com/realm/realm-js">https://github.com/realm/realm-js</a></li>\n<li><a href="https://github.com/lolatravel/realm-react-redux">https://github.com/lolatravel/realm-react-redux</a></li>\n</ul>\n<p>RealmがそもそもMobileApp開発用のライブラリなのでSchema定義が必要なORMはJS開発においてどうなんだろう。Store連携もrealm-react-reduxのExampleをパッとみた感じだいぶ筋が悪いようにみえる。<br>\nただしパフォーマンスは良い……。</p>\n<p>もう一個の選択肢はAsyncStorage</p>\n<p><a href="https://facebook.github.io/react-native/docs/asyncstorage.html">https://facebook.github.io/react-native/docs/asyncstorage.html</a></p>\n<p>実装的にはFileIOで実現してるっぽい？<br>\nStoreとの連携は <a href="https://github.com/rt2zz/redux-persist">https://github.com/rt2zz/redux-persist</a> が推奨されてる雰囲気だけどどうなんでしょうね。</p>\n<p>どちらにしろ一長一短ありそうなのでStorage連携部分は疎結合 as far as possible　やっていきましょうね。</p>\n<h3>Routingがカオス</h3>\n<p>ぶっちゃけReactはWebでもreact-routerとかいうライブラリが幅を効かせているくらいにはカオス。</p>\n<p>さて、Webとモバイルappはルーティングの考え方がそもそも違う。モバイルはSceneを積み上げたりなんだりというあれなので脳を切り替えないといけない。</p>\n<ul>\n<li>\n<p>React Navigation</p>\n<p>（半）公式。<br>\n<a href="https://facebook.github.io/react-native/docs/navigation.html">https://facebook.github.io/react-native/docs/navigation.html</a></p>\n</li>\n<li>\n<p>react-native-router-flux （略してRNRF）</p>\n<p>日本語でググると真っ先に出てくる。<strong>どの辺がfluxなの？</strong><br>\n<a href="https://github.com/aksonov/react-native-router-flux">https://github.com/aksonov/react-native-router-flux</a></p>\n</li>\n<li>\n<p>react-router （native)</p>\n<p>react-routerはwebだけじゃなくてnative用のアダプターも用意されてる。<br>\n<a href="https://reacttraining.com/react-router/native/guides/philosophy">https://reacttraining.com/react-router/native/guides/philosophy</a></p>\n</li>\n</ul>\n<p>RNRFがたくさんヒットするのはたぶんWeb系からReact Nativeに降りてきた層が多いから。<br>\n……react-routerのnativeプラグインじゃあかんの？</p>\n<p>RNRFのメリットみえてこない。react-routerが信用できない気持ちはわかるけど……<br>\nreact-routerはすごい勢いでクソコードを量産するイメージがあるのであまり採用したくない。</p>\n<p>勘だけどReact Navigationが一番良さそう。公式でおすすめしてるし。<br>\nRNRFにしろバックエンドはNavigation使ってるからここで学習コストけちってもどうせ後でハマる。Learn onceはありえない。<br>\nまぁ何を採用するにしてもいつでも捨てれるような書き方をするべきだとおもう。</p>\n<h2>まとめ</h2>\n<p>Setupはめっちゃ楽。ただしいうほどLearn onceでゎなぃ。<br>\nでもNativeもMobileAppは独特の環境構築やらお作用やらが色々ある上に毎年のようにアップデートされてしんどいイメージがあるのでそこがないだけでめっちゃ楽。見た目だけで色々と批判されがちなPHP StyleのJSXだけど、StoryboardとSwiftコードとイベントハンドラとのクソ分離っぷりとXCodeとかいうの絶望IDEのジェットストリームアタックを回避できるのは最高便利。</p>\n<p>Webのノリで開発できるかというとそんなことはないんだけど、逆にそこを変に抽象化せずに「違うものはちげえんだよ」の精神でAPI提供しているところに好感がもてる。しばらくやっていきます。</p>',frontmatter:{path:"react-native-begginers-guide",title:"React Native 101 （ビギナー忘備録）",date:"April 14, 2018",category:"MobileApp",tags:["React","ReactNative"]}}},pathContext:{path:"react-native-begginers-guide",next:{frontmatter:{title:"Python製のJSON-RPCサーバーをAsyncに対応させた",path:"async-supported-json-rpc-handler"}},prev:{frontmatter:{title:"Pythonのasync関数を扱いやすくする方法",path:"make-Pthons-async-easy"}}}}}});
//# sourceMappingURL=path---entry-react-native-begginers-guide-ecb0e289d1b30cec791d.js.map