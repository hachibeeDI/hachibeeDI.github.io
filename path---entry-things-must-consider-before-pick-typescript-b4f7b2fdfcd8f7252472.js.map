{"version":3,"sources":["webpack:///path---entry-things-must-consider-before-pick-typescript-b4f7b2fdfcd8f7252472.js","webpack:///./.cache/json/entry-things-must-consider-before-pick-typescript.json"],"names":["webpackJsonp","420","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","path","date","category","tags","pathContext","next","prev"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,kBAAAC,OAAA,gBAAkDC,gBAAmBC,GAAA,+JAAAC,KAAA,sjIAAkYC,aAA82HC,KAAA,8CAAAN,MAAA,sCAAAO,KAAA,eAAAC,SAAA,MAAAC,MAAA,iCAAkLC,aAAgBJ,KAAA,8CAAAK,KAAA,KAAAC,MAAyEP,aAAeL,MAAA,wBAAAM,KAAA","file":"path---entry-things-must-consider-before-pick-typescript-b4f7b2fdfcd8f7252472.js","sourcesContent":["webpackJsonp([277492152350788],{\n\n/***/ 420:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Hatch tech blog\",\"author\":\"Ogura Daiki\"}},\"markdownRemark\":{\"id\":\"/Users/dogura/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2018-05-03-advice-before-pick-typescript/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>過去にTypeScriptとReact &#x26; Reduxの組み合わせで物を作ったことがあって何も問題のなかった人はこれ読まなくて大丈夫です。<br>\\n安易に「型つけたほうが〜〜〜イマドキっしょwwww」みたいに煽る記事にイライラしたので書きました。</p>\\n<p>ちなみに筆者もTypeScriptに挑戦して2週間くらいで手探りなところが多々あるので、何か問題のある箇所や質問したいこと（あるいは仕事の依頼も;)）あったら遠慮なく指摘してほしい。Twitterとかで？<br>\\n（ブログにコメントフォームつけるべきなのか…）</p>\\n<h2>TypeScriptを採用するまえに考えること</h2>\\n<ol>\\n<li>\\n<p>あなたはブログ記事のコピペだけに頼らずフロントエンドのビルド環境の構築を行なう忍耐力がありますか</p>\\n</li>\\n<li>\\n<p>あなたはReact（とRedux）に詳しいですか\\n（「詳しい」と言うのは公式のドキュメントをちゃんと読んだことがありますか程度の意味です）</p>\\n</li>\\n<li>\\n<p>あなたはTypeScriptと同等かそれ以上に強い型システムを持つ静的型付言語（Scala, Kotlin, Swift, Rust, あともちろんOCamlとHaskell)の知見がありますか</p>\\n</li>\\n<li>\\n<p>あなたのプロジェクトは時間が潤沢にありますか</p>\\n</li>\\n</ol>\\n<p>最低でも2つにチェックマークをつけれない場合、TypeScriptを採用するのはやめておきましょう。</p>\\n<p>ただし、時間が潤沢にあって学習のモチベーションが高いメンバー揃いなのであれば挑戦してもいいでしょう。結構面白いですよ。</p>\\n<h2>考え直すべき理由</h2>\\n<h3>ビルドプロセスの複雑化</h3>\\n<p>TypeScriptに限らず現代のフロントエンドのビルド環境は複雑です。<br>\\nTypeScriptのコンパイルはオプションや設定ファイルが多く、設定次第では力を引き出せずに終わります。そして世間の人たちは色々なお気持ちを持っているので、適当に日本語のブログ記事をひとつだけ読んでサンプルをコピペするとババをひく可能性があります。</p>\\n<p>そしてコンパイル後のモジュールの結合などに結局Webpackなどの力を借りる必要があります。TypeScriptのビルド環境構築には、TypeScriptkコンパイラ + 既存のビルドツール知識の両方が必要になると考えていいでしょう。<br>\\nTypeScript自体もそうですし、babelやWebpackのバージョンも日進月歩で進歩しています。最低でもREADME.mdを読む忍耐力と時間の余裕がないと最初の一歩でいきなり技術的負債を抱える羽目になるでしょう。</p>\\n<p>柔軟な型の記述をできることが仇になり、適切なコンパイルオプションを設定しないTypeScriptはただの劣化JavaScriptでしかありません。そして後でそれを修正していくのは <strong>非常に</strong> 苦痛です。</p>\\n<h3>ReactとReduxへの知識の要求</h3>\\n<p>「TypeScriptは型が導いてくれるから書くの楽になる！！」なんて考えるのはよしましょう。<br>\\nReactやReduxはそもそもJavaScriptで書かれたライブラリです。Reactはシンプルなのでまだ良いのですが、Redux（react-reduxも）の型定義はつじつま合わせで地獄です。もともと知識があって、そこからどう言う型がつくのか逆算するのは簡単ですが、逆は難しいでしょう。</p>\\n<p>さらに、素のActionCreator -> Action -> Reducerの連携は文字列ベースのアナログなものなので、普通にやると型安全になりません。なので typescript-fsa などの新しいライブラリを導入する必要がでてきます。ここには <code>Type Guard</code> の仕組みなども関わってきます。ただでさえ余計なものをゴチャゴチャと色々入れないといけないReduxですが、TypeScriptをつかうことでそれがさらに増えていきます。</p>\\n<p>ReactとReduxに十分な知見と自信がないのであればTypeScriptと組み合わせることは、僕はあまりおすすめしません。どうせ白紙から始めるなら、そもそもがTypeScriptで書かれたAngularを使うことを検討してもいいんじゃあないでしょうか。<br>\\n僕はflowtypeについては十分な知見がないので言及しません。</p>\\n<h3>型システムへの知見</h3>\\n<p>僕の知る限りですが、まずGUIアーキテクチャに知見のあるフロントエンジニアはほとんどいません。そして静的型付け言語の知見がある人はもっと少ないです。オブジェクト指向もおぼつかない人がほとんど（プロトタイプベースにむりやりねじ込んだclass構文は未だに受け入れがたい）ですが、ReactもReduxも作者の趣味からか、明らかに関数型言語を指向しています。</p>\\n<p>Redux関係ツールは大量のoverloadとgenericsを駆使して型付けされているので、コンパイルエラーが絶望的にわかりにくいです。<br>\\n初心者は速攻で心が折れて場当たり的な匿名型、あるいはanyやobjectを連発するようになるでしょう。当たり前ですが、これらを使い始めた時点でTypeScriptは記述が多くてめんどくさいだけの劣化JavaScriptです。少々過激な意見かもしれませんが僕はそうおもいます。</p>\\n<p>また、これは4番目の「時間が潤沢にありますか」に関わる話になりますが、「動作上は問題ないはずなのに型定義的な問題からコンパイルが通らない」みたいな事態がおこりえます。ReactのComponentとElementとNodeの区別をつけてコードを書いている人がどれくらいいるのでしょうか…ぼくは常にうろ覚えです。<br>\\nそういった定義上のエラー、新しいmiddlewareの導入、ことあるごとに <code>.d.ts</code> をあらためる必要性がでてきます。そして定義ファイルの複雑さに絶望します。</p>\\n<p>筆者は最初のチェックで1, 2, 3にチェックできる自信がありましたが、TypeScriptを組み合わせた瞬間に生じる作業コストの増大には心底うんざりしましたし、時間がなくてさっさと実装を進めないといけないのに型定義ファイルをチェックしているときは全部anyにしてやろうかとおもいます。<br>\\nというか僕程度の知見だとanyなしにはいつまでも実装が進まない状況も発生します。もちろん重要なところ（TypeScriptの価値を損ねるようなところ）で型付けをサボるようなことはしませんが、その味付け具合をチームでちゃんと共有できるとはおもいません。</p>\\n<h2>まとめ</h2>\\n<p>TypeScript（他の多くの静的型付けの言語も）は簡単ですが、難しいです。<br>\\nつまりただコンパイルが通るだけのコードを書き、動くプログラムを書くこと自体にはある意味でそれほどの苦労はありません。型宣言のほとんどを最大限にゆるくすれば良いからです。昔話ですが、筆者は昔C#でコードを書く系のプロジェクトに参加したときにほぼ全ての関数の引数と返り値がObjectで宣言されているものにぶつかったことがあります。<br>\\nしかしコンパイラの方チェックに最大限の仕事をさせようとすると急に難易度が跳ね上がります。特にJavaScriptが（いまはまだ）あくまで世界の主人であり、従にすぎないTypeScriptには常にanyの引力が存在しています。忍耐力と、それなりの学習コストを投入しないと恩恵を受けるのは難しいでしょう。</p>\\n<p>一時期HaxeというAltJSに傾倒していたときに感じた、JavaScript製の成果物に型をつけていく徒労感はTypeScriptコミュニティが作ったエコシステムの進歩によってかなり減じましたが、完全には解決していません。<br>\\nそしてどこの会社も時間がありませんし、現在のWeb製作進行の基本は高速なプロトタイピングとイテレーションだとおもいます。そうでなくとも、例えばそもそも一刻も早く世に出してプロダクトの価値を問いたいスタートアップや、進捗を上司や取引先にせっつかれる中でロジックの実装よりも型合わせクイズに集中できる人がどれだけいるのでしょうか。</p>\\n<p>僕は結構自分に自信がありましたが、それでもまだTypeScriptだと70%くらいの速度しか出ません。ぼくがツールまわりのセットアップをサボっているのも影響していますが……。<br>\\n一方で、一度TypeScriptで「<strong>ちゃんと</strong>」組めば、その後の機能追加や修正は圧倒的に楽かつ安全になるという手応え（知ってたけど）は得ましたし、慣れれば生のJavaScriptと同じかそれ以上の速度で実装を進められるとおもいます。</p>\\n<p>まとめると、僕がこの記事を通して言いたかったのは「よく考え直して」これだけです。<br>\\nTypeScriptはその特性がマッチするプロダクトと上手く扱えるメンバーが揃えば強力なツールですが、流行りだからという理由で導入するものではありません。まだね。（JavaScriptにはいい加減うんざりなのでいつかは消えてくれという気持ちはある）</p>\\n<p>でも最後に一つだけ。型はいいぞ！ 色々悲観的なことを言ったけど気持ちと筋力があればなんとかなるからみんな使おうぜ！（雑）</p>\",\"frontmatter\":{\"path\":\"things-must-consider-before-pick-typescript\",\"title\":\"ReactのプロジェクトでTypeScriptを選ぶ前に考えるべきこと\",\"date\":\"May 03, 2018\",\"category\":\"Web\",\"tags\":[\"TypeScript\",\"React\",\"Redux\"]}}},\"pathContext\":{\"path\":\"things-must-consider-before-pick-typescript\",\"next\":null,\"prev\":{\"frontmatter\":{\"title\":\"Gatsbyに前後記事へのリンクを追加する\",\"path\":\"implement-next-and-previous-links-to-gatsby\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---entry-things-must-consider-before-pick-typescript-b4f7b2fdfcd8f7252472.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Hatch tech blog\",\"author\":\"Ogura Daiki\"}},\"markdownRemark\":{\"id\":\"/Users/dogura/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2018-05-03-advice-before-pick-typescript/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>過去にTypeScriptとReact &#x26; Reduxの組み合わせで物を作ったことがあって何も問題のなかった人はこれ読まなくて大丈夫です。<br>\\n安易に「型つけたほうが〜〜〜イマドキっしょwwww」みたいに煽る記事にイライラしたので書きました。</p>\\n<p>ちなみに筆者もTypeScriptに挑戦して2週間くらいで手探りなところが多々あるので、何か問題のある箇所や質問したいこと（あるいは仕事の依頼も;)）あったら遠慮なく指摘してほしい。Twitterとかで？<br>\\n（ブログにコメントフォームつけるべきなのか…）</p>\\n<h2>TypeScriptを採用するまえに考えること</h2>\\n<ol>\\n<li>\\n<p>あなたはブログ記事のコピペだけに頼らずフロントエンドのビルド環境の構築を行なう忍耐力がありますか</p>\\n</li>\\n<li>\\n<p>あなたはReact（とRedux）に詳しいですか\\n（「詳しい」と言うのは公式のドキュメントをちゃんと読んだことがありますか程度の意味です）</p>\\n</li>\\n<li>\\n<p>あなたはTypeScriptと同等かそれ以上に強い型システムを持つ静的型付言語（Scala, Kotlin, Swift, Rust, あともちろんOCamlとHaskell)の知見がありますか</p>\\n</li>\\n<li>\\n<p>あなたのプロジェクトは時間が潤沢にありますか</p>\\n</li>\\n</ol>\\n<p>最低でも2つにチェックマークをつけれない場合、TypeScriptを採用するのはやめておきましょう。</p>\\n<p>ただし、時間が潤沢にあって学習のモチベーションが高いメンバー揃いなのであれば挑戦してもいいでしょう。結構面白いですよ。</p>\\n<h2>考え直すべき理由</h2>\\n<h3>ビルドプロセスの複雑化</h3>\\n<p>TypeScriptに限らず現代のフロントエンドのビルド環境は複雑です。<br>\\nTypeScriptのコンパイルはオプションや設定ファイルが多く、設定次第では力を引き出せずに終わります。そして世間の人たちは色々なお気持ちを持っているので、適当に日本語のブログ記事をひとつだけ読んでサンプルをコピペするとババをひく可能性があります。</p>\\n<p>そしてコンパイル後のモジュールの結合などに結局Webpackなどの力を借りる必要があります。TypeScriptのビルド環境構築には、TypeScriptkコンパイラ + 既存のビルドツール知識の両方が必要になると考えていいでしょう。<br>\\nTypeScript自体もそうですし、babelやWebpackのバージョンも日進月歩で進歩しています。最低でもREADME.mdを読む忍耐力と時間の余裕がないと最初の一歩でいきなり技術的負債を抱える羽目になるでしょう。</p>\\n<p>柔軟な型の記述をできることが仇になり、適切なコンパイルオプションを設定しないTypeScriptはただの劣化JavaScriptでしかありません。そして後でそれを修正していくのは <strong>非常に</strong> 苦痛です。</p>\\n<h3>ReactとReduxへの知識の要求</h3>\\n<p>「TypeScriptは型が導いてくれるから書くの楽になる！！」なんて考えるのはよしましょう。<br>\\nReactやReduxはそもそもJavaScriptで書かれたライブラリです。Reactはシンプルなのでまだ良いのですが、Redux（react-reduxも）の型定義はつじつま合わせで地獄です。もともと知識があって、そこからどう言う型がつくのか逆算するのは簡単ですが、逆は難しいでしょう。</p>\\n<p>さらに、素のActionCreator -> Action -> Reducerの連携は文字列ベースのアナログなものなので、普通にやると型安全になりません。なので typescript-fsa などの新しいライブラリを導入する必要がでてきます。ここには <code>Type Guard</code> の仕組みなども関わってきます。ただでさえ余計なものをゴチャゴチャと色々入れないといけないReduxですが、TypeScriptをつかうことでそれがさらに増えていきます。</p>\\n<p>ReactとReduxに十分な知見と自信がないのであればTypeScriptと組み合わせることは、僕はあまりおすすめしません。どうせ白紙から始めるなら、そもそもがTypeScriptで書かれたAngularを使うことを検討してもいいんじゃあないでしょうか。<br>\\n僕はflowtypeについては十分な知見がないので言及しません。</p>\\n<h3>型システムへの知見</h3>\\n<p>僕の知る限りですが、まずGUIアーキテクチャに知見のあるフロントエンジニアはほとんどいません。そして静的型付け言語の知見がある人はもっと少ないです。オブジェクト指向もおぼつかない人がほとんど（プロトタイプベースにむりやりねじ込んだclass構文は未だに受け入れがたい）ですが、ReactもReduxも作者の趣味からか、明らかに関数型言語を指向しています。</p>\\n<p>Redux関係ツールは大量のoverloadとgenericsを駆使して型付けされているので、コンパイルエラーが絶望的にわかりにくいです。<br>\\n初心者は速攻で心が折れて場当たり的な匿名型、あるいはanyやobjectを連発するようになるでしょう。当たり前ですが、これらを使い始めた時点でTypeScriptは記述が多くてめんどくさいだけの劣化JavaScriptです。少々過激な意見かもしれませんが僕はそうおもいます。</p>\\n<p>また、これは4番目の「時間が潤沢にありますか」に関わる話になりますが、「動作上は問題ないはずなのに型定義的な問題からコンパイルが通らない」みたいな事態がおこりえます。ReactのComponentとElementとNodeの区別をつけてコードを書いている人がどれくらいいるのでしょうか…ぼくは常にうろ覚えです。<br>\\nそういった定義上のエラー、新しいmiddlewareの導入、ことあるごとに <code>.d.ts</code> をあらためる必要性がでてきます。そして定義ファイルの複雑さに絶望します。</p>\\n<p>筆者は最初のチェックで1, 2, 3にチェックできる自信がありましたが、TypeScriptを組み合わせた瞬間に生じる作業コストの増大には心底うんざりしましたし、時間がなくてさっさと実装を進めないといけないのに型定義ファイルをチェックしているときは全部anyにしてやろうかとおもいます。<br>\\nというか僕程度の知見だとanyなしにはいつまでも実装が進まない状況も発生します。もちろん重要なところ（TypeScriptの価値を損ねるようなところ）で型付けをサボるようなことはしませんが、その味付け具合をチームでちゃんと共有できるとはおもいません。</p>\\n<h2>まとめ</h2>\\n<p>TypeScript（他の多くの静的型付けの言語も）は簡単ですが、難しいです。<br>\\nつまりただコンパイルが通るだけのコードを書き、動くプログラムを書くこと自体にはある意味でそれほどの苦労はありません。型宣言のほとんどを最大限にゆるくすれば良いからです。昔話ですが、筆者は昔C#でコードを書く系のプロジェクトに参加したときにほぼ全ての関数の引数と返り値がObjectで宣言されているものにぶつかったことがあります。<br>\\nしかしコンパイラの方チェックに最大限の仕事をさせようとすると急に難易度が跳ね上がります。特にJavaScriptが（いまはまだ）あくまで世界の主人であり、従にすぎないTypeScriptには常にanyの引力が存在しています。忍耐力と、それなりの学習コストを投入しないと恩恵を受けるのは難しいでしょう。</p>\\n<p>一時期HaxeというAltJSに傾倒していたときに感じた、JavaScript製の成果物に型をつけていく徒労感はTypeScriptコミュニティが作ったエコシステムの進歩によってかなり減じましたが、完全には解決していません。<br>\\nそしてどこの会社も時間がありませんし、現在のWeb製作進行の基本は高速なプロトタイピングとイテレーションだとおもいます。そうでなくとも、例えばそもそも一刻も早く世に出してプロダクトの価値を問いたいスタートアップや、進捗を上司や取引先にせっつかれる中でロジックの実装よりも型合わせクイズに集中できる人がどれだけいるのでしょうか。</p>\\n<p>僕は結構自分に自信がありましたが、それでもまだTypeScriptだと70%くらいの速度しか出ません。ぼくがツールまわりのセットアップをサボっているのも影響していますが……。<br>\\n一方で、一度TypeScriptで「<strong>ちゃんと</strong>」組めば、その後の機能追加や修正は圧倒的に楽かつ安全になるという手応え（知ってたけど）は得ましたし、慣れれば生のJavaScriptと同じかそれ以上の速度で実装を進められるとおもいます。</p>\\n<p>まとめると、僕がこの記事を通して言いたかったのは「よく考え直して」これだけです。<br>\\nTypeScriptはその特性がマッチするプロダクトと上手く扱えるメンバーが揃えば強力なツールですが、流行りだからという理由で導入するものではありません。まだね。（JavaScriptにはいい加減うんざりなのでいつかは消えてくれという気持ちはある）</p>\\n<p>でも最後に一つだけ。型はいいぞ！ 色々悲観的なことを言ったけど気持ちと筋力があればなんとかなるからみんな使おうぜ！（雑）</p>\",\"frontmatter\":{\"path\":\"things-must-consider-before-pick-typescript\",\"title\":\"ReactのプロジェクトでTypeScriptを選ぶ前に考えるべきこと\",\"date\":\"May 03, 2018\",\"category\":\"Web\",\"tags\":[\"TypeScript\",\"React\",\"Redux\"]}}},\"pathContext\":{\"path\":\"things-must-consider-before-pick-typescript\",\"next\":null,\"prev\":{\"frontmatter\":{\"title\":\"Gatsbyに前後記事へのリンクを追加する\",\"path\":\"implement-next-and-previous-links-to-gatsby\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/entry-things-must-consider-before-pick-typescript.json\n// module id = 420\n// module chunks = 277492152350788"],"sourceRoot":""}