{"version":3,"sources":["webpack:///path---entry-unify-sync-and-async-function-in-python-08add278e059aa2e8a09.js","webpack:///./.cache/json/entry-unify-sync-and-async-function-in-python.json"],"names":["webpackJsonp","416","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","path","date","category","tags","pathContext","next","prev"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,kBAAAC,OAAA,gBAAkDC,gBAAmBC,GAAA,wKAAAC,KAAA,sgbAAAC,aAA6rcC,KAAA,0CAAAN,MAAA,2BAAAO,KAAA,oBAAAC,SAAA,SAAAC,MAAA,qBAA+JC,aAAgBJ,KAAA,0CAAAK,MAAyDN,aAAeL,MAAA,wBAAAM,KAAA,gDAAsFM,MAASP,aAAeL,MAAA,mCAAAM,KAAA","file":"path---entry-unify-sync-and-async-function-in-python-08add278e059aa2e8a09.js","sourcesContent":["webpackJsonp([112910364600428],{\n\n/***/ 416:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Hatch tech blog\",\"author\":\"Ogura Daiki\"}},\"markdownRemark\":{\"id\":\"/Users/dogura/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2018-2-21-unify-sync-and-async-function-in-python/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Blockingな関数をasync化する方法</h2>\\n<p><code>EventLoop.run_in_executor</code> を使いましょう（結論）。<br>\\n<a href=\\\"https://docs.python.org/3/library/asyncio-eventloop.html\\\">https://docs.python.org/3/library/asyncio-eventloop.html</a></p>\\n<p>関数と引数を渡すとExecutorのコンテクストで実行してAwaitable(coroutine)を返してくれます。<br>\\n第一引数のexecutorは省略可能で、その場合は実行環境に応じたものが自動的に使われます。ThreadベースとProcessベースで性質が違いますので要求に応じて使い分けましょう。<br>\\nExecutorにもよりますが引数はシリアライズ可能なものに限ります。名前付き引数はpartialで事前にbindしておく必要があります。</p>\\n<p>なおWindows環境特有の問題としてKeyboardInterruptをうまく扱えないみたいな問題があるようなのですがWindowsでプログラをミングすることがないので特に確かめたりとかはしてしません。<br>\\n参考: => <a href=\\\"https://gist.github.com/lambdalisue/05d5654bd1ec04992ad316d50924137c\\\">https://gist.github.com/lambdalisue/05d5654bd1ec04992ad316d50924137c</a></p>\\n<h2>サンプル</h2>\\n<p>おざなりですんません。<br>\\nチラシの裏レベルの書きなぐりですがいろいろなパターンの実装があります。手元で実行してみるとわかりやすいかとおもいます。</p>\\n<p><a href=\\\"https://gist.github.com/hachibeeDI/f38bc0496fc9e29ddb3f45c08b88432d\\\">https://gist.github.com/hachibeeDI/f38bc0496fc9e29ddb3f45c08b88432d</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">import</span> asyncio\\n<span class=\\\"token keyword\\\">from</span> time <span class=\\\"token keyword\\\">import</span> sleep<span class=\\\"token punctuation\\\">,</span> time\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">blocker</span><span class=\\\"token punctuation\\\">(</span>txt<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'aaa'</span> <span class=\\\"token operator\\\">+</span> txt\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">async_sample</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    start <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    results <span class=\\\"token operator\\\">=</span> loop<span class=\\\"token punctuation\\\">.</span>run_until_complete<span class=\\\"token punctuation\\\">(</span>asyncio<span class=\\\"token punctuation\\\">.</span>gather<span class=\\\"token punctuation\\\">(</span>\\n        loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    time_took <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start\\n\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'time took'</span><span class=\\\"token punctuation\\\">,</span> time_took<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>results<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">async_sample2</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    start <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    f1 <span class=\\\"token operator\\\">=</span> loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span>\\n    f2 <span class=\\\"token operator\\\">=</span> loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span>\\n    f3 <span class=\\\"token operator\\\">=</span> loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token keyword\\\">await</span> f1<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">await</span> f2<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">await</span> f3<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    time_took <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'time took'</span><span class=\\\"token punctuation\\\">,</span> time_took<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">sync_sample</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    sync_start <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    sync_results <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n        blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n    sync_time_took <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> sync_start\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>sync_time_took<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>sync_results<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">from</span> functools <span class=\\\"token keyword\\\">import</span> partial\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">promisify</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> executor<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_promisified</span><span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\n        <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__inner</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>kw<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span>executor<span class=\\\"token punctuation\\\">,</span> partial<span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">*</span>a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">*</span>kw<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> __inner\\n\\n    <span class=\\\"token keyword\\\">return</span> _promisified\\n\\n\\nloop <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>get_event_loop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\n@promisify<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">promisified_blocker</span><span class=\\\"token punctuation\\\">(</span>txt<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'aaa'</span> <span class=\\\"token operator\\\">+</span> txt\\n\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">promisify_sample</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    start <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\"># f1 = promisified_blocker('1')</span>\\n    <span class=\\\"token comment\\\"># f2 = promisified_blocker('2')</span>\\n    <span class=\\\"token comment\\\"># f3 = promisified_blocker('3')</span>\\n    <span class=\\\"token comment\\\"># print([</span>\\n    <span class=\\\"token comment\\\">#     await f1,</span>\\n    <span class=\\\"token comment\\\">#     await f2,</span>\\n    <span class=\\\"token comment\\\">#     await f3,</span>\\n    <span class=\\\"token comment\\\"># ])</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">await</span> asyncio<span class=\\\"token punctuation\\\">.</span>gather<span class=\\\"token punctuation\\\">(</span>\\n        promisified_blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        promisified_blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        promisified_blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    time_took <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'time took'</span><span class=\\\"token punctuation\\\">,</span> time_took<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">if</span> __name__ <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'__main__'</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\"># async_sample(loop)</span>\\n    <span class=\\\"token comment\\\"># print('-' * 10)</span>\\n    <span class=\\\"token comment\\\"># loop.run_until_complete(async_sample2(loop))</span>\\n    <span class=\\\"token comment\\\"># print('-' * 10)</span>\\n    <span class=\\\"token comment\\\"># sync_sample()</span>\\n    <span class=\\\"token comment\\\">#</span>\\n\\n    loop<span class=\\\"token punctuation\\\">.</span>run_until_complete<span class=\\\"token punctuation\\\">(</span>promisify_sample<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    loop<span class=\\\"token punctuation\\\">.</span>close<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>3秒の同期的スリープ関数を三回実行するサンプルでも、executor越しで実行すると並列に行われている様子が観察できるかとおもいます。</p>\\n<p><code>run_in_executor</code> はcoroutineを返しますので、async関数内であれば結果をawaitで待つことも可能です。</p>\\n<p>何故かPythonの非同期関係のサンプルは副作用ベースで記述されているものばかりで返り値を持てないのかなとおもってしまわなくもなくはなくないですがちゃんと持てます。</p>\\n<h2>まとめ</h2>\\n<p>asyncを使いはじめると既存の関数も同様のインターフェースで統一的に並列実行したくなることがかなりあるかとおもいます。<br>\\nそういうときに便利だとおもいます。</p>\\n<p>ただし適当に使っても高速化するかどうかは微妙なのでボトルネックに対して使うこと、そしてネックになっているのがIOなのかCPUなのかを検証してから使うようにするといいんじゃないかなーとおもいました。</p>\\n<p>終了。</p>\",\"frontmatter\":{\"path\":\"unify-sync-and-async-function-in-python\",\"title\":\"Pythonで同期関数と非同期関数を統一的に扱う\",\"date\":\"February 21, 2018\",\"category\":\"Python\",\"tags\":[\"Python\",\"Async\"]}}},\"pathContext\":{\"path\":\"unify-sync-and-async-function-in-python\",\"next\":{\"frontmatter\":{\"title\":\"Gatsbyに前後記事へのリンクを追加する\",\"path\":\"implement-next-and-previous-links-to-gatsby\"}},\"prev\":{\"frontmatter\":{\"title\":\"Python製のJSON-RPCサーバーをAsyncに対応させた\",\"path\":\"async-supported-json-rpc-handler\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---entry-unify-sync-and-async-function-in-python-08add278e059aa2e8a09.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Hatch tech blog\",\"author\":\"Ogura Daiki\"}},\"markdownRemark\":{\"id\":\"/Users/dogura/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2018-2-21-unify-sync-and-async-function-in-python/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Blockingな関数をasync化する方法</h2>\\n<p><code>EventLoop.run_in_executor</code> を使いましょう（結論）。<br>\\n<a href=\\\"https://docs.python.org/3/library/asyncio-eventloop.html\\\">https://docs.python.org/3/library/asyncio-eventloop.html</a></p>\\n<p>関数と引数を渡すとExecutorのコンテクストで実行してAwaitable(coroutine)を返してくれます。<br>\\n第一引数のexecutorは省略可能で、その場合は実行環境に応じたものが自動的に使われます。ThreadベースとProcessベースで性質が違いますので要求に応じて使い分けましょう。<br>\\nExecutorにもよりますが引数はシリアライズ可能なものに限ります。名前付き引数はpartialで事前にbindしておく必要があります。</p>\\n<p>なおWindows環境特有の問題としてKeyboardInterruptをうまく扱えないみたいな問題があるようなのですがWindowsでプログラをミングすることがないので特に確かめたりとかはしてしません。<br>\\n参考: => <a href=\\\"https://gist.github.com/lambdalisue/05d5654bd1ec04992ad316d50924137c\\\">https://gist.github.com/lambdalisue/05d5654bd1ec04992ad316d50924137c</a></p>\\n<h2>サンプル</h2>\\n<p>おざなりですんません。<br>\\nチラシの裏レベルの書きなぐりですがいろいろなパターンの実装があります。手元で実行してみるとわかりやすいかとおもいます。</p>\\n<p><a href=\\\"https://gist.github.com/hachibeeDI/f38bc0496fc9e29ddb3f45c08b88432d\\\">https://gist.github.com/hachibeeDI/f38bc0496fc9e29ddb3f45c08b88432d</a></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">import</span> asyncio\\n<span class=\\\"token keyword\\\">from</span> time <span class=\\\"token keyword\\\">import</span> sleep<span class=\\\"token punctuation\\\">,</span> time\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">blocker</span><span class=\\\"token punctuation\\\">(</span>txt<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'aaa'</span> <span class=\\\"token operator\\\">+</span> txt\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">async_sample</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    start <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    results <span class=\\\"token operator\\\">=</span> loop<span class=\\\"token punctuation\\\">.</span>run_until_complete<span class=\\\"token punctuation\\\">(</span>asyncio<span class=\\\"token punctuation\\\">.</span>gather<span class=\\\"token punctuation\\\">(</span>\\n        loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    time_took <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start\\n\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'time took'</span><span class=\\\"token punctuation\\\">,</span> time_took<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>results<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">async_sample2</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    start <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    f1 <span class=\\\"token operator\\\">=</span> loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span>\\n    f2 <span class=\\\"token operator\\\">=</span> loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span>\\n    f3 <span class=\\\"token operator\\\">=</span> loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">,</span> blocker<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token keyword\\\">await</span> f1<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">await</span> f2<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">await</span> f3<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n    time_took <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'time took'</span><span class=\\\"token punctuation\\\">,</span> time_took<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">sync_sample</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    sync_start <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    sync_results <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n        blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n    sync_time_took <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> sync_start\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>sync_time_took<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>sync_results<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">from</span> functools <span class=\\\"token keyword\\\">import</span> partial\\n\\n\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">promisify</span><span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">,</span> executor<span class=\\\"token operator\\\">=</span><span class=\\\"token boolean\\\">None</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">_promisified</span><span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n\\n        <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__inner</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">*</span>a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">**</span>kw<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">return</span> loop<span class=\\\"token punctuation\\\">.</span>run_in_executor<span class=\\\"token punctuation\\\">(</span>executor<span class=\\\"token punctuation\\\">,</span> partial<span class=\\\"token punctuation\\\">(</span>func<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">*</span>a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">*</span>kw<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> __inner\\n\\n    <span class=\\\"token keyword\\\">return</span> _promisified\\n\\n\\nloop <span class=\\\"token operator\\\">=</span> asyncio<span class=\\\"token punctuation\\\">.</span>get_event_loop<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\n@promisify<span class=\\\"token punctuation\\\">(</span>loop<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">promisified_blocker</span><span class=\\\"token punctuation\\\">(</span>txt<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'aaa'</span> <span class=\\\"token operator\\\">+</span> txt\\n\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">promisify_sample</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    start <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\"># f1 = promisified_blocker('1')</span>\\n    <span class=\\\"token comment\\\"># f2 = promisified_blocker('2')</span>\\n    <span class=\\\"token comment\\\"># f3 = promisified_blocker('3')</span>\\n    <span class=\\\"token comment\\\"># print([</span>\\n    <span class=\\\"token comment\\\">#     await f1,</span>\\n    <span class=\\\"token comment\\\">#     await f2,</span>\\n    <span class=\\\"token comment\\\">#     await f3,</span>\\n    <span class=\\\"token comment\\\"># ])</span>\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">await</span> asyncio<span class=\\\"token punctuation\\\">.</span>gather<span class=\\\"token punctuation\\\">(</span>\\n        promisified_blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        promisified_blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        promisified_blocker<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'3'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    time_took <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> start\\n    <span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'time took'</span><span class=\\\"token punctuation\\\">,</span> time_took<span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">if</span> __name__ <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'__main__'</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\"># async_sample(loop)</span>\\n    <span class=\\\"token comment\\\"># print('-' * 10)</span>\\n    <span class=\\\"token comment\\\"># loop.run_until_complete(async_sample2(loop))</span>\\n    <span class=\\\"token comment\\\"># print('-' * 10)</span>\\n    <span class=\\\"token comment\\\"># sync_sample()</span>\\n    <span class=\\\"token comment\\\">#</span>\\n\\n    loop<span class=\\\"token punctuation\\\">.</span>run_until_complete<span class=\\\"token punctuation\\\">(</span>promisify_sample<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    loop<span class=\\\"token punctuation\\\">.</span>close<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>3秒の同期的スリープ関数を三回実行するサンプルでも、executor越しで実行すると並列に行われている様子が観察できるかとおもいます。</p>\\n<p><code>run_in_executor</code> はcoroutineを返しますので、async関数内であれば結果をawaitで待つことも可能です。</p>\\n<p>何故かPythonの非同期関係のサンプルは副作用ベースで記述されているものばかりで返り値を持てないのかなとおもってしまわなくもなくはなくないですがちゃんと持てます。</p>\\n<h2>まとめ</h2>\\n<p>asyncを使いはじめると既存の関数も同様のインターフェースで統一的に並列実行したくなることがかなりあるかとおもいます。<br>\\nそういうときに便利だとおもいます。</p>\\n<p>ただし適当に使っても高速化するかどうかは微妙なのでボトルネックに対して使うこと、そしてネックになっているのがIOなのかCPUなのかを検証してから使うようにするといいんじゃないかなーとおもいました。</p>\\n<p>終了。</p>\",\"frontmatter\":{\"path\":\"unify-sync-and-async-function-in-python\",\"title\":\"Pythonで同期関数と非同期関数を統一的に扱う\",\"date\":\"February 21, 2018\",\"category\":\"Python\",\"tags\":[\"Python\",\"Async\"]}}},\"pathContext\":{\"path\":\"unify-sync-and-async-function-in-python\",\"next\":{\"frontmatter\":{\"title\":\"Gatsbyに前後記事へのリンクを追加する\",\"path\":\"implement-next-and-previous-links-to-gatsby\"}},\"prev\":{\"frontmatter\":{\"title\":\"Python製のJSON-RPCサーバーをAsyncに対応させた\",\"path\":\"async-supported-json-rpc-handler\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/entry-unify-sync-and-async-function-in-python.json\n// module id = 416\n// module chunks = 112910364600428"],"sourceRoot":""}