webpackJsonp([80242908539581],{403:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Hatch tech blog",author:"Ogura Daiki"}},markdownRemark:{id:"/Users/hachibee/.ghq/github.com/hachibeeDI/hachibeeDI.github.io/src/pages/2018-1-16-make-Pythons-async-easy/index.md absPath of file >>> MarkdownRemark",html:'<h2>Pythonのasync関数を扱いやすくするライブラリの紹介</h2>\n<p>最新のPythonでは、JavaScriptのようにasync関数を使うことができるようになっています。しかしあまり普及しているようにはみえません。<br>\nコミュニティの性質上いまだにPython2がのさばっていることや、JavaScriptのように非同期前提の設計にAPIが（まだ）なっていないなどの理由があるんじゃあないかと推測していますが、もう１つAPIが<s>古臭い</s>少々複雑であるというのも少なからず影響しているかとおもいます。</p>\n<p><a href="https://docs.python.org/3.6/library/asyncio-task.html">https://docs.python.org/3.6/library/asyncio-task.html</a></p>\n<p>こちらがasync周りのドキュメントになっていますが、これだけ読んでも基本的な使い方ですらピンとくる人はなかなか少ないんじゃないかとおもいます。<br>\n少なくともJavaScriptからやってきてこれを読んだ人は面喰らうのではないでしょうか。</p>\n<p>ちなみに僕は何度も読んで理解したつもりにはなるのですが、暫く経つと何もわからなくなってしまいます。<br>\nこの記事も失われつつある記憶にすがりつつ書いてます。よろしくお願いします。</p>\n<h2>CoroutineとFuture</h2>\n<p>まずPythonの非同期処理において我々ユーザーが扱うことになるのが、CoroutineとFuture（Promiseみたいなものです）というオブジェクトです。またイベントループも我々の手で明示的に作成する必要があります。<br>\n（Taskというものもあるのですがややこしくなるので割愛します）</p>\n<p>JavaScriptではasync関数がPromiseを返しますが、Pythonで帰ってくるのはあくまでCoroutineで、Futureではありません。<br>\nまた、Coroutine実行のスケジューリングなどもユーザーが自分の手でやる必要があります。これによって汎用性が増し、最適化の余地も広がる（たぶん）のですが、反面かなり読むのがしんどいコードが出来上がります。つーかこんなAPI覚えんの無理だよ！！！ 秒で忘れるわ！！</p>\n<p>というわけで簡単なラッパーライブラリを作りました。</p>\n<h2>Python asyncio toolkit for Humans™ ことfutures-shell</h2>\n<p>ほんとはfuturifyって名前にしたかったんですが使われてました。futuristも使われてました。僕の貧弱なボキャブラリーでは他に良い名前が思い浮かびませんでした。<br>\nちなみに煽り文はrequestsからインスパイアされました。あれもurllibという非人間的APIを使いやすくラップしたものでしたね。</p>\n<p>Pythonのasync関数はボイラープレートコードが多いです。例えばasync関数から計算結果を取り出すためのコードは公式ドキュメントですと</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">slow_operation</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    future<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token string">\'Future is done!\'</span><span class="token punctuation">)</span>\n\nloop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>\nfuture <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Future<span class="token punctuation">(</span><span class="token punctuation">)</span>\nasyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>slow_operation<span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">)</span>\nloop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>future<span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nloop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>というようになってます。</p>\n<p>引数でfuture渡してsetter経由で計算結果セット…なんて毎回やりたい作業じゃないはずです。そもそもこれだとasync関数からawaitで呼ぶときとイベントループ外から呼ぶときで方式変わっちゃって汎用性低くね？ やばくね？</p>\n<p>というわけでこれです。<a href="https://github.com/hachibeeDI/futures-shell">hachibeeDI/futures-shell</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> asyncio <span class="token keyword">import</span> get_event_loop<span class="token punctuation">,</span> sleep\n<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> futures_shell <span class="token keyword">import</span> <span class="token punctuation">(</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     futurify<span class="token punctuation">,</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     unwrap<span class="token punctuation">,</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>\n\n<span class="token operator">>></span><span class="token operator">></span> @futurify\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">slow_txt_return</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">:</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">await</span> sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> f<span class="token string">\'{txt} is done!\'</span>\n\n\n<span class="token operator">>></span><span class="token operator">></span> loop <span class="token operator">=</span> get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> txt_result <span class="token operator">=</span> unwrap<span class="token punctuation">(</span>loop<span class="token punctuation">,</span> slow_txt_return<span class="token punctuation">(</span><span class="token string">\'Future\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>txt_result<span class="token punctuation">)</span>\nFuture <span class="token keyword">is</span> Done!\n</code></pre>\n      </div>\n<p>ワースゴーイ！ シンプルー！</p>\n<p><code>futurify</code>をデコレーターにつけることで自動的にasync関数がFutureを返すようになります。ちなみにですが、普通の同期関数につけることも可能で、その場合はその関数の結果がFutureに入ります。</p>\n<h2>まとめ</h2>\n<p>ドキュメントを雑に読んで思いつきで実装したライブラリなので実用性皆無だとおもいますが、やたら登場する役者が多い上に低レイヤな解説に終始している公式の説明を理解するためのお供にどうでしょうか。</p>\n<p><a href="https://github.com/aio-libs">https://github.com/aio-libs</a> みたいなものも登場しているので、徐々にですがPythonでも非同期関係のAPIが充実していくといいですね！ おしまい。</p>',frontmatter:{path:"make-Pthons-async-easy",title:"Pythonのasync関数を扱いやすくする",date:"January 16, 2018",category:"Python",tags:["Python","async/await"]}}},pathContext:{path:"make-Pthons-async-easy",next:null,prev:{frontmatter:{title:"現代的な補完システムであるLanguage Server ProtocolとJavaScript版の運用、そしてVimとの連動についての雑なまとめ",path:"how-to-get-javascript-intellisense-in-Vim"}}}}}});
//# sourceMappingURL=path---entry-make-pthons-async-easy-1e63dcad20d84922b81f.js.map